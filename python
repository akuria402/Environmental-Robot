import random
import requests
import json

class EnvironmentRobot:
    def __init__(self):
        self.recyclables = []

    def give_fact(self, country=None):
        """
        Returns a random fact about the environment or the average temperature in a country.

        Parameters:
        country (str): The name of a country. If provided, the function returns the average temperature in that country.

        Returns:
        str: A random fact about the environment or the average temperature in a country.
        """
        facts = ["Over 8 million tons of plastic are dumped into our oceans every year.",
                 "The Amazon Rainforest produces over 20% of the world's oxygen.",
                 "Recycling one aluminum can saves enough energy to power a TV for three hours.",
                 "The world's largest landfill is located in New York and is larger than the entire island of Manhattan.",
                 "Carbon dioxide emissions from human activity have increased by 80% since 1970."]
        if country:
            country_api_url = f"https://restcountries.com/v3.1/name/{country}"
            response = requests.get(country_api_url)
            data = response.json()
            try:
                country_code = data[0]['cca2']
                weather_api_url = f"https://api.openweathermap.org/data/2.5/weather?q={country_code}&appid=<API-KEY>"
                response = requests.get(weather_api_url)
                response.raise_for_status()
                data = response.json()
                fact = f"Average temperature in {country} is {data['main']['temp']}°C."
            except requests.exceptions.HTTPError:
                fact = "Sorry, I couldn't find any facts about that country's climate."
        else:
            fact = random.choice(facts)
        return fact

    def remind(self):
        """
        Returns a reminder to stay green and keep the environment clean.

        Returns:
        str: A reminder to stay green and keep the environment clean.
        """
        return "Remember to stay green and keep the environment clean."

    def recycle(self, item):
        """
        Adds an item to the list of recyclables.

        Parameters:
        item (str): The name of an item to recycle.

        Returns:
        str: A message indicating that the item has been added to the list of recyclables.
        """
        self.recyclables.append(item)
        return f"{item} has been added to the list of recyclables."

    def get_recyclables(self):
        """
        Returns the list of recyclables.

        Returns:
        list: The list of recyclables.
        """
        return self.recyclables

food = {}

def add_food():
    name = input("Enter food name: ")
    calories = int(input("Enter calories: "))
    protein = float(input("Enter protein (in grams): "))
    carbs = float(input("Enter carbs (in grams): "))
    fat = float(input("Enter fat (in grams): "))
    food[name] = {
        "calories": calories,
        "protein": protein,
        "carbs": carbs,
        "fat": fat
    }
    print("Food added successfully!")


import requests
import json

# API key for OpenWeatherMap
API_KEY = "1fe6df620337f168a605f5c0ff3925f5"

# Function to get the current weather and forecast for a location
def get_weather(location):
    
    url = f"https://api.openweathermap.org/data/2.5/weather?q={location}&appid={API_KEY}&units=metric"
    response = requests.get(url)

    # Parse the JSON response
    data = json.loads(response.text)

    # Get the current temperature and weather description
    temp = data["main"]["temp"]
    desc = data["weather"][0]["description"]

    # Make a GET request to the OpenWeatherMap API for forecast data
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={location}&appid={API_KEY}&units=metric"
    response = requests.get(url)

    # Parse the JSON response
    data = json.loads(response.text)

    # Get the forecast temperature and weather description for the next 5 days
    forecast_temps = []
    forecast_descs = []
    for i in range(0, 5):
        forecast_temps.append(data["list"][i]["main"]["temp"])
        forecast_descs.append(data["list"][i]["weather"][0]["description"])

    # Print the current weather and forecast data
    print(f"Current temperature in {location}: {temp}°C, {desc}")
    print("Forecast for the next 5 days:")
    for i in range(0, 5):
        print(f"Day {i+1}: {forecast_temps[i]}°C, {forecast_descs[i]}")
